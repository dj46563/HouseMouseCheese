// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cheese.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.Cheese {

  /// <summary>Holder for reflection information generated from cheese.proto</summary>
  public static partial class CheeseReflection {

    #region Descriptor
    /// <summary>File descriptor for cheese.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CheeseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxjaGVlc2UucHJvdG8SBmNoZWVzZSIXCgVGcmFtZRIOCgZwaXhlbHMYAyAD",
            "KAUidwoHUGF0dGVybhINCgV3aWR0aBgBIAEoBRIOCgZoZWlnaHQYAiABKAUS",
            "FwoPZnJhbWVzX3Blcl9iZWF0GAMgASgCEhUKDXVuaXF1ZV9jeWNsZXMYBCAB",
            "KAUSHQoGZnJhbWVzGAUgAygLMg0uY2hlZXNlLkZyYW1lQhmqAhZHb29nbGUu",
            "UHJvdG9idWYuQ2hlZXNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Cheese.Frame), global::Google.Protobuf.Cheese.Frame.Parser, new[]{ "Pixels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Cheese.Pattern), global::Google.Protobuf.Cheese.Pattern.Parser, new[]{ "Width", "Height", "FramesPerBeat", "UniqueCycles", "Frames" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Cheese.CheeseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      pixels_ = other.pixels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "pixels" field.</summary>
    public const int PixelsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_pixels_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> pixels_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Pixels {
      get { return pixels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pixels_.Equals(other.pixels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pixels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pixels_.WriteTo(output, _repeated_pixels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pixels_.CalculateSize(_repeated_pixels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      pixels_.Add(other.pixels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26:
          case 24: {
            pixels_.AddEntriesFrom(input, _repeated_pixels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pattern : pb::IMessage<Pattern> {
    private static readonly pb::MessageParser<Pattern> _parser = new pb::MessageParser<Pattern>(() => new Pattern());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Cheese.CheeseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern(Pattern other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      framesPerBeat_ = other.framesPerBeat_;
      uniqueCycles_ = other.uniqueCycles_;
      frames_ = other.frames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern Clone() {
      return new Pattern(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "frames_per_beat" field.</summary>
    public const int FramesPerBeatFieldNumber = 3;
    private float framesPerBeat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FramesPerBeat {
      get { return framesPerBeat_; }
      set {
        framesPerBeat_ = value;
      }
    }

    /// <summary>Field number for the "unique_cycles" field.</summary>
    public const int UniqueCyclesFieldNumber = 4;
    private int uniqueCycles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueCycles {
      get { return uniqueCycles_; }
      set {
        uniqueCycles_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Protobuf.Cheese.Frame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Protobuf.Cheese.Frame.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.Cheese.Frame> frames_ = new pbc::RepeatedField<global::Google.Protobuf.Cheese.Frame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.Cheese.Frame> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FramesPerBeat, other.FramesPerBeat)) return false;
      if (UniqueCycles != other.UniqueCycles) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (FramesPerBeat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FramesPerBeat);
      if (UniqueCycles != 0) hash ^= UniqueCycles.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (FramesPerBeat != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FramesPerBeat);
      }
      if (UniqueCycles != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UniqueCycles);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (FramesPerBeat != 0F) {
        size += 1 + 4;
      }
      if (UniqueCycles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueCycles);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pattern other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.FramesPerBeat != 0F) {
        FramesPerBeat = other.FramesPerBeat;
      }
      if (other.UniqueCycles != 0) {
        UniqueCycles = other.UniqueCycles;
      }
      frames_.Add(other.frames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 29: {
            FramesPerBeat = input.ReadFloat();
            break;
          }
          case 32: {
            UniqueCycles = input.ReadInt32();
            break;
          }
          case 42: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
